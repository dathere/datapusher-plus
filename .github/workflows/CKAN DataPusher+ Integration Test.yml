name: CKAN Runner with ckanapi
on:
  workflow_dispatch:

env:
  CKAN_VERSION: "2.11"
  POSTGRES_PASSWORD: postgres
  CKAN_DB_PASSWORD: pass
  CKAN_SITE_URL: http://localhost:5000
  CKAN_SITE_ID: default
  CKAN_SITE_TITLE: "CKAN Test Instance"

jobs:
  setup:
    runs-on: ubuntu-latest
    container:
      image: ckan/ckan-dev:2.11
      options: --user root
    services:
      solr:
        image: ckan/ckan-solr:2.11-solr9
        ports: ["8983:8983"]
      postgres:
        image: ckan/ckan-postgres-dev:2.11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:3
        ports: ["6379:6379"]
    env:
      CKAN_SQLALCHEMY_URL: postgresql://ckan_default:pass@postgres/ckan_test
      CKAN_DATASTORE_WRITE_URL: postgresql://datastore_write:pass@postgres/datastore_test
      CKAN_DATASTORE_READ_URL: postgresql://datastore_read:pass@postgres/datastore_test
      CKAN_SOLR_URL: http://solr:8983/solr/ckan
      CKAN_REDIS_URL: redis://redis:6379/1
      CKAN_SITE_URL: http://localhost:5000
    steps:
      - name: Install essential tools
        run: |
          apt-get update -y
          apt-get install -y curl wget postgresql-client jq
          
      - uses: actions/checkout@v4
      
      - name: Wait for PostgreSQL
        run: |
          timeout=90
          while [ $timeout -gt 0 ]; do
            if PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "SELECT 1;" >/dev/null 2>&1; then
              break
            fi
            sleep 3
            timeout=$((timeout-3))
          done

      - name: Setup database
        run: |
          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "
            CREATE USER IF NOT EXISTS ckan_default WITH PASSWORD '$CKAN_DB_PASSWORD';
            CREATE USER IF NOT EXISTS datastore_write WITH PASSWORD '$CKAN_DB_PASSWORD';
            CREATE USER IF NOT EXISTS datastore_read WITH PASSWORD '$CKAN_DB_PASSWORD';
            CREATE DATABASE IF NOT EXISTS ckan_test OWNER ckan_default;
            CREATE DATABASE IF NOT EXISTS datastore_test OWNER ckan_default;
            GRANT ALL PRIVILEGES ON DATABASE ckan_test TO ckan_default;
            GRANT ALL PRIVILEGES ON DATABASE datastore_test TO datastore_write;
            GRANT CONNECT ON DATABASE datastore_test TO datastore_read;
          "

      - name: Install requirements
        run: |
          python3 -m pip install --upgrade pip
          pip install ckanapi
          pip install -e 'git+https://github.com/dathere/datapusher-plus.git#egg=datapusher-plus'
          pip install -e 'git+https://github.com/ckan/ckanext-scheming.git#egg=ckanext-scheming'

      - name: Install qsv
        run: |
          wget -q "https://github.com/dathere/qsv/releases/download/4.0.0/qsv-4.0.0-x86_64-unknown-linux-musl.zip" -O qsv.zip
          unzip -o qsv.zip
          mv qsvdp /usr/local/bin/qsvdp 2>/dev/null || mv qsv /usr/local/bin/qsv
          chmod +x /usr/local/bin/qsv*

      - name: Setup CKAN configuration
        run: |
          # Basic configuration
          cat >> /srv/app/src/ckan/test-core.ini << EOF
          
          [DEFAULT]
          debug = true
          
          [app:main]
          ckan.site_url = http://localhost:5000
          sqlalchemy.url = postgresql://ckan_default:pass@postgres/ckan_test
          ckan.datastore.write_url = postgresql://datastore_write:pass@postgres/datastore_test
          ckan.datastore.read_url = postgresql://datastore_read:pass@postgres/datastore_test
          solr_url = http://solr:8983/solr/ckan
          ckan.redis.url = redis://redis:6379/1
          ckan.plugins = datastore datapusher_plus scheming_datasets
          ckan.site_id = default
          ckan.site_title = CKAN Test
          ckanext.datapusher_plus.qsv_bin = /usr/local/bin/qsvdp
          scheming.dataset_schemas = ckanext.datapusher_plus:dataset-druf.yaml
          scheming.presets = ckanext.scheming:presets.json
          ckanext.datapusher_plus.formats = csv tsv xls xlsx
          EOF

      - name: Initialize CKAN database
        run: |
          ckan -c /srv/app/src/ckan/test-core.ini db init
          ckan -c /srv/app/src/ckan/test-core.ini datastore set-permissions | PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres

      - name: Start CKAN server
        run: |
          nohup ckan -c /srv/app/src/ckan/test-core.ini run --host 0.0.0.0 --port 5000 --disable-reloader > /tmp/ckan.log 2>&1 &
          timeout=60
          while [ $timeout -gt 0 ]; do
            if curl -fsS "http://localhost:5000/api/3/action/status_show" >/dev/null 2>&1; then
              break
            fi
            sleep 2
            timeout=$((timeout-2))
          done

      - name: Create sysadmin user
        run: |
          ckanapi action user_create --config /srv/app/src/ckan/test-core.ini \
            name=ckan_admin \
            email=admin@example.com \
            password=test1234 \
            fullname="CKAN Administrator" 2>/dev/null
          ckan -c /srv/app/src/ckan/test-core.ini sysadmin add ckan_admin

      - name: Create API token for datapusher-plus
        run: |
          dp_token=$(ckan -c /srv/app/src/ckan/test-core.ini user token add ckan_admin dpplus | tail -n 1 | tr -d '\t')
          ckan config-tool /srv/app/src/ckan/test-core.ini "ckanext.datapusher_plus.api_token=$dp_token"

      - name: Create organization
        run: |
          ckanapi action organization_create --config /srv/app/src/ckan/test-core.ini \
            name=demo-organization \
            title="Demo Organization" 2>/dev/null
          ckanapi action organization_member_create --config /srv/app/src/ckan/test-core.ini \
            id=demo-organization username=ckan_admin role=admin 2>/dev/null

      - name: Create dataset with resource
        run: |
          ckanapi action package_create \
            name=my-first-dataset \
            title="My First Dataset" \
            owner_org=demo-organization \
            'tags:[{"name":"test"}]' \
            -c /srv/app/src/ckan/test-core.ini 2>/dev/null
          ckanapi action resource_create \
            package_id=my-first-dataset \
            url="https://raw.githubusercontent.com/frictionlessdata/test-data/master/files/csv/100kb.csv" \
            name="Sample CSV Data" \
            format=CSV \
            -c /srv/app/src/ckan/test-core.ini

      - name: Display results
        run: |
          echo "=== CKAN Status ==="
          curl -s "http://localhost:5000/api/3/action/status_show" | jq .result.extensions 2>/dev/null
          echo ""
          echo "=== Created Content ==="
          curl -s "http://localhost:5000/api/3/action/package_list" | jq
          echo ""
          echo "Dataset URL: http://localhost:5000/dataset/my-first-dataset"

      - name: Cleanup
        if: always()
        run: pkill -f "ckan.*run" || true
