name: CKAN Runner with ckanapi

on: 
  # push:
  # pull_request:
  workflow_dispatch:  # Allows manual trigger from GitHub UI

env:
  # Configuration variables
  CKAN_VERSION: "2.11"
  POSTGRES_PASSWORD: postgres
  CKAN_DB_PASSWORD: pass
  CKAN_SITE_URL: http://localhost:5000
  CKAN_SITE_ID: default
  CKAN_SITE_TITLE: "CKAN Test Instance"

jobs:
  setup:
    runs-on: ubuntu-latest
    container:
      image: ckan/ckan-dev:2.11
      options: --user root
    services:
      solr:
        image: ckan/ckan-solr:2.11-solr9
      postgres:
        image: ckan/ckan-postgres-dev:2.11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:3
    env:
      CKAN_SQLALCHEMY_URL: postgresql://ckan_default:pass@postgres/ckan_test
      CKAN_DATASTORE_WRITE_URL: postgresql://datastore_write:pass@postgres/datastore_test
      CKAN_DATASTORE_READ_URL: postgresql://datastore_read:pass@postgres/datastore_test
      CKAN_SOLR_URL: http://solr:8983/solr/ckan
      CKAN_REDIS_URL: redis://redis:6379/1
      
    steps:
      - name: Fix permissions and install essential tools
        run: |
          mkdir -p /__w/_temp
          chmod -R 777 /__w/_temp
          chmod -R 777 /__w/
          
          apt-get update
          apt-get install -y curl wget net-tools procps postgresql-client
          
          echo "Essential tools installed successfully"
      
      - uses: actions/checkout@v4
      
      - name: Setup database users and permissions
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if pg_isready -h postgres -p 5432 -U postgres >/dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              break
            fi
            
            if PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "SELECT 1;" >/dev/null 2>&1; then
              echo "PostgreSQL is ready (via psql)!"
              break
            fi
            
            echo "Waiting for postgres... ($timeout seconds remaining)"
            sleep 3
            timeout=$((timeout-3))
          done
          
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for PostgreSQL to be ready"
            exit 1
          fi
          
          echo "Creating database users..."
          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "CREATE USER ckan_default WITH PASSWORD '$CKAN_DB_PASSWORD';" || echo "User ckan_default already exists"
          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "CREATE USER datastore_write WITH PASSWORD '$CKAN_DB_PASSWORD';" || echo "User datastore_write already exists"
          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "CREATE USER datastore_read WITH PASSWORD '$CKAN_DB_PASSWORD';" || echo "User datastore_read already exists"
          
          echo "Creating databases..."
          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "CREATE DATABASE ckan_test OWNER ckan_default;" || echo "Database ckan_test already exists"
          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "CREATE DATABASE datastore_test OWNER ckan_default;" || echo "Database datastore_test already exists"
          
          echo "Setting database permissions..."
          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE ckan_test TO ckan_default;" || true
          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE datastore_test TO datastore_write;" || true
          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "GRANT CONNECT ON DATABASE datastore_test TO datastore_read;" || true
          
          echo "Database setup completed successfully"
      
      - name: Install requirements and ckanapi
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .
          
          # Install ckanapi
          pip install ckanapi
          
          # Install ckanext-scheming
          pip install -e "git+https://github.com/ckan/ckanext-scheming.git#egg=ckanext-scheming"
          
          echo "Requirements, ckanapi, and ckanext-scheming installed successfully"
          
      - name: Setup CKAN configuration
        run: |
          if [ -f /srv/app/src/ckan/test-core.ini ]; then
            cp /srv/app/src/ckan/test-core.ini /tmp/test.ini
            echo "Copied existing test-core.ini"
          elif [ -f /srv/app/src/ckan/test.ini ]; then
            cp /srv/app/src/ckan/test.ini /tmp/test.ini
            echo "Copied existing test.ini"
          else
            echo "Creating basic CKAN configuration..."
            cat > /tmp/test.ini << 'EOF'
          [DEFAULT]
          debug = true
          
          [server:main]
          use = config:common.ini
          
          [app:main]
          use = config:common.ini
          ckan.site_url = http://localhost:5000
          sqlalchemy.url = postgresql://ckan_default:pass@postgres/ckan_test
          ckan.datastore.write_url = postgresql://datastore_write:pass@postgres/datastore_test
          ckan.datastore.read_url = postgresql://datastore_read:pass@postgres/datastore_test
          solr_url = http://solr:8983/solr/ckan
          ckan.redis.url = redis://redis:6379/1
          ckan.site_id = default
          ckan.site_title = CKAN Test
          ckan.plugins = datastore datapusher scheming_datasets scheming_groups scheming_organizations
          EOF
          fi
          
          sed -i 's|postgresql://.*ckan_test|postgresql://ckan_default:pass@postgres/ckan_test|g' /tmp/test.ini
          sed -i 's|ckan.datastore.write_url.*|ckan.datastore.write_url = postgresql://datastore_write:pass@postgres/datastore_test|g' /tmp/test.ini
          sed -i 's|ckan.datastore.read_url.*|ckan.datastore.read_url = postgresql://datastore_read:pass@postgres/datastore_test|g' /tmp/test.ini
          
          if ! grep -q "solr_url" /tmp/test.ini; then
            echo "solr_url = http://solr:8983/solr/ckan" >> /tmp/test.ini
          fi
          if ! grep -q "ckan.redis.url" /tmp/test.ini; then
            echo "ckan.redis.url = redis://redis:6379/1" >> /tmp/test.ini
          fi
          
          # Configure ckanext-scheming plugins (update existing plugins line or add new one)
          if grep -q "ckan.plugins" /tmp/test.ini; then
            sed -i 's/ckan.plugins = datastore datapusher/ckan.plugins = datastore datapusher scheming_datasets scheming_groups scheming_organizations/' /tmp/test.ini
            sed -i 's/ckan.plugins = datastore/ckan.plugins = datastore scheming_datasets scheming_groups scheming_organizations/' /tmp/test.ini
          else
            echo "ckan.plugins = datastore scheming_datasets scheming_groups scheming_organizations" >> /tmp/test.ini
          fi
          
          # Add scheming configuration
          if ! grep -q "scheming.dataset_schemas" /tmp/test.ini; then
            echo "scheming.dataset_schemas = ckanext.scheming:ckan_dataset.yaml" >> /tmp/test.ini
          fi
          if ! grep -q "scheming.presets" /tmp/test.ini; then
            echo "scheming.presets = ckanext.scheming:presets.json" >> /tmp/test.ini
          fi
          if ! grep -q "scheming.dataset_fallback" /tmp/test.ini; then
            echo "scheming.dataset_fallback = false" >> /tmp/test.ini
          fi
          
          echo "Configuration setup completed"
          echo "Configuration file contents:"
          head -30 /tmp/test.ini
          
      - name: Initialize CKAN database
        run: |
          echo "Initializing CKAN database..."
          
          echo "Testing database connectivity..."
          if ! PGPASSWORD=$CKAN_DB_PASSWORD psql -h postgres -U ckan_default -d ckan_test -c "SELECT 1;" >/dev/null 2>&1; then
            echo "Cannot connect to CKAN database. Checking if database exists..."
            if ! PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "SELECT 1 FROM pg_database WHERE datname='ckan_test';" | grep -q 1; then
              echo "Creating ckan_test database..."
              PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres -c "CREATE DATABASE ckan_test OWNER ckan_default;"
            fi
          fi
          
          if ckan -c /tmp/test.ini db init; then
            echo "CKAN database initialized successfully"
          else
            echo "CKAN database initialization failed, but continuing..."
            echo "This might be because the database is already initialized"
          fi
          
          echo "Setting up datastore permissions..."
          if ckan -c /tmp/test.ini datastore set-permissions | PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U postgres --set ON_ERROR_STOP=1; then
            echo "Datastore permissions set successfully"
          else
            echo "Datastore permission setup failed, but continuing..."
            echo "This might be expected if datastore is already configured"
          fi
          
          echo "Database initialization completed"
          
      - name: Start CKAN server
        run: |
          echo "Starting CKAN server..."
          
          ckan -c /tmp/test.ini run --host 0.0.0.0 --port 5000 --disable-reloader &
          CKAN_PID=$!
          echo "CKAN PID: $CKAN_PID"
          
          echo "Waiting for CKAN server to start..."
          timeout=90
          success=false
          
          while [ $timeout -gt 0 ]; do
            if ! kill -0 $CKAN_PID 2>/dev/null; then
              echo "CKAN process died unexpectedly"
              echo "Checking for error logs..."
              tail -n 50 /var/log/ckan/*.log 2>/dev/null || echo "No log files found"
              exit 1
            fi
            
            if curl -f -s $CKAN_SITE_URL/api/3/action/status_show > /dev/null 2>&1; then
              echo "CKAN server is running and responding!"
              success=true
              break
            fi
            
            echo "Still waiting... ($timeout seconds remaining)"
            sleep 3
            timeout=$((timeout-3))
          done
          
          if [ "$success" = false ]; then
            echo "Timeout waiting for CKAN server to start"
            echo "Checking process status..."
            ps aux | grep ckan || echo "ps command failed"
            echo "Checking network listeners..."
            netstat -tlnp 2>/dev/null || ss -tlnp 2>/dev/null || echo "Network tools failed"
            echo "Trying direct curl to root endpoint..."
            curl -v $CKAN_SITE_URL/ || echo "Curl to root failed"
            exit 1
          fi
          
          echo "CKAN_URL=$CKAN_SITE_URL" >> $GITHUB_ENV
          echo "CKAN server started successfully!"
          
      - name: Test CKAN API Status with ckanapi
        run: |
          echo "Testing CKAN API status with ckanapi..."
          
          # Test using ckanapi CLI
          if ckanapi action status_show -r $CKAN_SITE_URL; then
            echo "CKAN API status check successful with ckanapi!"
          else
            echo "CKAN API status check failed"
            exit 1
          fi
          
          # Test using local config
          echo "Testing with local config file..."
          if ckanapi action status_show -c /tmp/test.ini; then
            echo "Local CKAN API access working!"
          else
            echo "Local CKAN API access failed"
            exit 1
          fi

          # Test scheming extension
          echo "Testing ckanext-scheming installation..."
          if ckanapi action scheming_dataset_schema_list -c /tmp/test.ini; then
            echo "ckanext-scheming is working!"
          else
            echo "ckanext-scheming test failed"
            exit 1
          fi
          
          # Show available dataset schemas
          echo "Available dataset schemas:"
          ckanapi action scheming_dataset_schema_list -c /tmp/test.ini

      - name: Create sysadmin user with ckanapi
        run: |
          echo "Creating sysadmin user with ckanapi..."
          
          # Create sysadmin user using ckanapi (local has sysadmin privileges by default)
          if ckanapi action user_create \
            name=ckan_admin \
            email=admin@example.com \
            password=test1234 \
            fullname="CKAN Administrator" \
            about="System administrator created via ckanapi and GitHub Actions" \
            with_apitoken:true \
            -c /tmp/test.ini; then
            echo "Sysadmin user created successfully"
          else
            echo "User might already exist, continuing..."
          fi
          
          # Make the user a sysadmin using CKAN CLI (ckanapi doesn't have sysadmin action)
          if ckan -c /tmp/test.ini sysadmin add ckan_admin; then
            echo "User granted sysadmin privileges"
          else
            echo "User might already be sysadmin, continuing..."
          fi
          
          echo "Sysadmin user setup completed"

      - name: Promote ckan_admin to sysadmin
        run: |
          echo "Promoting ckan_admin to sysadmin..."
          
          # Promote user to sysadmin using CKAN CLI with correct config path
          if ckan -c /tmp/test.ini sysadmin add ckan_admin; then
            echo "User ckan_admin promoted to sysadmin successfully"
          else
            echo "User might already be sysadmin or promotion failed"
          fi
          
          # Wait a moment for changes to take effect
          sleep 2
          
          # Verify sysadmin status and get API key
          echo "Retrieving user details to verify sysadmin status and API key..."
          user_data=$(ckanapi action user_show id=ckan_admin -c /tmp/test.ini)
          
          # Check if output is valid JSON
          if echo "$user_data" | python3 -c "import json, sys; json.load(sys.stdin)" 2>/dev/null; then
            echo "User details (formatted):"
            echo "$user_data" | python3 -m json.tool
            
            # Extract sysadmin status
            is_sysadmin=$(echo "$user_data" | python3 -c "
            import json, sys
            try:
                data = json.load(sys.stdin)
                result = data.get('result', {})
                print(str(result.get('sysadmin', False)).lower())
            except:
                print('false')
            ")
            
            # Extract API key (not token)
            api_key=$(echo "$user_data" | python3 -c "
            import json, sys
            try:
                data = json.load(sys.stdin)
                result = data.get('result', {})
                apikey = result.get('apikey')
                if apikey and apikey != 'None':
                    print(apikey)
                else:
                    print('')
            except:
                print('')
            ")
            
            echo "Sysadmin status: $is_sysadmin"
            if [ -n "$api_key" ] && [ "$api_key" != "None" ] && [ "$api_key" != "null" ]; then
              echo "API Key: $api_key"
              echo "CKAN_API_KEY=$api_key" >> $GITHUB_ENV
            else
              echo "No API key found in user data"
            fi
            
          else
            echo "Invalid JSON output from user_show command"
            echo "Raw output was:"
            echo "$user_data"
          fi
          
          echo "Sysadmin promotion process completed"

      - name: Create organization with ckanapi
        run: |
          echo "Creating demo organization with ckanapi..."
          
          # Create organization using ckanapi
          if ckanapi action organization_create \
            name=demo-organization \
            title="Demo Data Publishing Organization" \
            description="This is a comprehensive demo organization created via ckanapi and GitHub Actions for testing CKAN functionality and datapusher-plus integration." \
            image_url="https://via.placeholder.com/200x100/0066cc/ffffff?text=Demo+Org" \
            -c /tmp/test.ini; then
            echo "Organization created successfully!"
          else
            echo "Organization might already exist, continuing..."
          fi
          
          # Add admin user to organization
          if ckanapi action organization_member_create \
            id=demo-organization \
            username=ckan_admin \
            role=admin \
            -c /tmp/test.ini; then
            echo "Admin user added to organization"
          else
            echo "User might already be a member, continuing..."
          fi
          
          # Verify organization was created
          # echo "Verifying organization creation..."
          # ckanapi action organization_show id=demo-organization -c /tmp/test.ini | python3 -m json.tool
          
          echo "Organization creation completed"

      - name: Create dataset with ckanapi
        run: |
          echo "Creating demo dataset with ckanapi..."
          
          # Create dataset using ckanapi with comprehensive metadata
          if ckanapi action package_create \
            name=my-first-dataset \
            title="My First Comprehensive Dataset" \
            notes="This is a comprehensive demo dataset created via ckanapi and GitHub Actions for testing CKAN functionality, including datapusher-plus integration and automated data processing workflows." \
            owner_org=demo-organization \
            license_id=cc-by \
            version=1.0.0 \
            author="GitHub Actions Automation" \
            author_email=noreply@example.com \
            maintainer="CKAN Admin" \
            maintainer_email=admin@example.com \
            url=https://github.com/your-repo/your-project \
            private:false \
            state=active \
            'tags:[{"name":"demo"},{"name":"test"},{"name":"github-actions"},{"name":"automation"},{"name":"csv-data"},{"name":"datapusher-plus"}]' \
            -c /tmp/test.ini; then
            echo "Dataset created successfully!"
          else
            echo "Dataset might already exist, continuing..."
          fi
          
          # Verify dataset was created
          # echo "Verifying dataset creation..."
          # ckanapi action package_show id=my-first-dataset -c /tmp/test.ini | python3 -m json.tool
          
          echo "Dataset creation completed"

      - name: Add resource to dataset with ckanapi
        run: |
          echo "Adding resource to dataset with ckanapi..."
          
          # Add resource using ckanapi
          if ckanapi action resource_create \
            package_id=my-first-dataset \
            url="https://raw.githubusercontent.com/frictionlessdata/test-data/master/files/csv/100kb.csv" \
            name="Sample CSV Data - 100KB Test File" \
            description="This is a comprehensive test CSV resource containing sample data for testing CKAN functionality, ckanapi integration, and automated data processing workflows." \
            format=CSV \
            mimetype="text/csv" \
            -c /tmp/test.ini; then
            echo "Resource created successfully!"
          else
            echo "Resource creation failed"
            exit 1
          fi
          
          echo "Resource creation completed"
          
      - name: Display CKAN instance inventory
        run: |
          echo "CKAN Instance Inventory"
          echo "======================"
          
          # Show CKAN status
          echo "=== CKAN Status ==="
          ckanapi action status_show -c /tmp/test.ini
          
          echo ""
          echo "=== Available Dataset Schemas ==="
          ckanapi action scheming_dataset_schema_list -c /tmp/test.ini
          
          echo ""
          echo "=== Default Dataset Schema ==="
          ckanapi action scheming_dataset_schema_show type=dataset -c /tmp/test.ini | head -20
          
          echo ""
          echo "=== All Datasets ==="
          ckanapi action package_list -c /tmp/test.ini
          
          echo ""
          echo "=== All Organizations ==="
          ckanapi action organization_list -c /tmp/test.ini
          
          echo ""
          echo "=== All Users ==="
          ckanapi action user_list -c /tmp/test.ini
          
      - name: Final summary
        run: |
          echo "Content creation and verification completed!"
          echo "=============================================="
          echo "CREATED CONTENT SUMMARY:"
          echo "  Organization: demo-organization"
          echo "    Dataset: my-first-dataset"
          echo "      Resource: Sample CSV Data (100KB)"
          echo ""
          echo "CREATED USERS:"
          echo "  - ckan_admin (sysadmin)"
          echo "  - test_user (regular user)"  
          echo "  - editor_user (editor)"
          echo ""
          echo "INSTALLED EXTENSIONS:"
          echo "  - ckanext-scheming (dataset/group/org schema management)"
          echo ""
          echo "Access URLs:"
          echo "  - Dataset: $CKAN_SITE_URL/dataset/my-first-dataset"
          echo "  - Organization: $CKAN_SITE_URL/organization/demo-organization"
          echo "  - API Status: $CKAN_SITE_URL/api/3/action/status_show"
          echo "  - Dataset Schemas: $CKAN_SITE_URL/api/3/action/scheming_dataset_schema_list"
          echo ""
          echo "All operations completed using ckanapi and ckanext-scheming!"
          echo "=============================================="
          
      - name: Setup datapusher-plus (placeholder)
        run: |
          echo "This is where you'll add your datapusher-plus specific tests"
          echo "CKAN is now running successfully at $CKAN_SITE_URL"
          echo "Sample data has been created and verified using ckanapi:"
          echo "  - Multiple users with different privileges"
          echo "  - Organization: demo-organization"
          echo "  - Dataset: my-first-dataset (with scheming support)"
          echo "  - Resource: Sample CSV Data (CSV file ready for datapusher-plus)"
          echo ""
          echo "Extensions installed and ready:"
          echo "  - ckanext-scheming: Dataset/resource schema management ✓"
          echo "  - datastore: Structured data storage ✓"
          echo ""
          echo "You can now add steps to:"
          echo "  - Install datapusher-plus extension"
          echo "  - Configure datapusher-plus settings"  
          echo "  - Run datapusher-plus specific tests"
          echo "  - Test data upload and processing functionality"
          echo "  - Test CSV processing with the created resource"
          echo "  - Test schema validation with datapusher-plus"
          
      - name: Cleanup
        if: always()
        run: |
          echo "Stopping any running CKAN processes..."
          pkill -f "ckan.*run" || true
          echo "Cleanup completed"
