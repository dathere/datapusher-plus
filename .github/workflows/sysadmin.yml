name: Setup Environment

on: 
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  setup:
    runs-on: ubuntu-latest
    container:
      image: ckan/ckan-dev:2.11
      options: --user root
    services:
      solr:
        image: ckan/ckan-solr:2.11-solr9
      postgres:
        image: ckan/ckan-postgres-dev:2.11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:3
    env:
      CKAN_SQLALCHEMY_URL: postgresql://ckan_default:pass@postgres/ckan_test
      CKAN_DATASTORE_WRITE_URL: postgresql://datastore_write:pass@postgres/datastore_test
      CKAN_DATASTORE_READ_URL: postgresql://datastore_read:pass@postgres/datastore_test
      CKAN_SOLR_URL: http://solr:8983/solr/ckan
      CKAN_REDIS_URL: redis://redis:6379/1
      
    steps:
      - name: Fix permissions and install essential tools
        run: |
          mkdir -p /__w/_temp
          chmod -R 777 /__w/_temp
          chmod -R 777 /__w/
          apt-get update
          apt-get install -y curl wget net-tools procps postgresql-client
          echo "Essential tools installed successfully"
      
      - uses: actions/checkout@v4
      
      - name: Setup database
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if PGPASSWORD=postgres psql -h postgres -U postgres -c "SELECT 1;" >/dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for postgres... ($timeout seconds remaining)"
            sleep 3
            timeout=$((timeout-3))
          done
          
          # Create database users and databases
          PGPASSWORD=postgres psql -h postgres -U postgres << EOF
            CREATE USER ckan_default WITH PASSWORD 'pass';
            CREATE USER datastore_write WITH PASSWORD 'pass';
            CREATE USER datastore_read WITH PASSWORD 'pass';
            CREATE DATABASE ckan_test OWNER ckan_default;
            CREATE DATABASE datastore_test OWNER ckan_default;
            GRANT ALL PRIVILEGES ON DATABASE ckan_test TO ckan_default;
            GRANT ALL PRIVILEGES ON DATABASE datastore_test TO datastore_write;
            GRANT CONNECT ON DATABASE datastore_test TO datastore_read;
          EOF
          echo "Database setup completed"
      
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .
          echo "Requirements installed successfully"
          
      - name: Setup CKAN configuration
        run: |
          # Create a basic configuration file
          cat > /tmp/test.ini << 'EOF'
          [DEFAULT]
          debug = true
          
          [server:main]
          use = config:development.ini
          
          [app:main]
          use = config:development.ini
          ckan.site_url = http://localhost:5000
          sqlalchemy.url = postgresql://ckan_default:pass@postgres/ckan_test
          ckan.datastore.write_url = postgresql://datastore_write:pass@postgres/datastore_test
          ckan.datastore.read_url = postgresql://datastore_read:pass@postgres/datastore_test
          solr_url = http://solr:8983/solr/ckan
          ckan.redis.url = redis://redis:6379/1
          ckan.site_id = default
          ckan.site_title = CKAN Test
          ckan.plugins = datastore datapusher
          EOF
          echo "Configuration setup completed"
          
      - name: Initialize CKAN database
        run: |
          echo "Initializing CKAN database..."
          ckan -c /tmp/test.ini db init || echo "Database might already be initialized"
          
          # Setup datastore permissions
          ckan -c /tmp/test.ini datastore set-permissions | PGPASSWORD=postgres psql -h postgres -U postgres --set ON_ERROR_STOP=1 || echo "Datastore permissions might already be set"
          echo "Database initialization completed"
          
      - name: Start CKAN server
        run: |
          echo "Starting CKAN server..."
          ckan -c /tmp/test.ini run --host 0.0.0.0 --port 5000 --disable-reloader &
          CKAN_PID=$!
          
          # Wait for server to start
          timeout=60
          while [ $timeout -gt 0 ]; do
            if curl -f -s http://localhost:5000/api/3/action/status_show > /dev/null 2>&1; then
              echo "CKAN server is running!"
              break
            fi
            sleep 3
            timeout=$((timeout-3))
          done
          
          echo "CKAN_URL=http://localhost:5000" >> $GITHUB_ENV
          echo "CKAN server started successfully!"
          
      - name: Test CKAN API Status
        run: |
          echo "Testing CKAN API status endpoint..."
          response=$(curl -s $CKAN_URL/api/3/action/status_show)
          echo "$response" | python3 -m json.tool
          
          if echo "$response" | grep -q '"success"[[:space:]]*:[[:space:]]*true'; then
            echo "✅ CKAN API is working!"
          else
            echo "❌ CKAN API check failed"
            exit 1
          fi

      - name: Create CKAN sysadmin user
        run: |
          echo "Creating CKAN sysadmin user..."
          
          # Create sysadmin user
          ckan -c /tmp/test.ini user add ckan_admin \
            email=admin@example.com \
            password=test1234 \
            fullname="CKAN Administrator" || echo "User might already exist"
          
          # Make the user a sysadmin
          ckan -c /tmp/test.ini sysadmin add ckan_admin || echo "User might already be sysadmin"
          
          echo "Sysadmin user setup completed"

      - name: Get API token for sysadmin user
        run: |
          echo "Getting API token for ckan_admin user..."
          
          # Get user info and extract the API key properly
          user_output=$(ckan -c /tmp/test.ini user show ckan_admin 2>/dev/null)
          echo "User info retrieved"
          
          # Extract the API key (the UUID after 'apikey=')
          api_key=$(echo "$user_output" | grep -o 'apikey=[a-f0-9-]*' | cut -d'=' -f2)
          
          if [ -z "$api_key" ]; then
            echo "API key not found in user output, generating new one..."
            api_key=$(python3 -c "import uuid; print(str(uuid.uuid4()))")
            
            # Update the user with new API key
            PGPASSWORD=pass psql -h postgres -U ckan_default -d ckan_test -c \
              "UPDATE public.user SET apikey='$api_key' WHERE name='ckan_admin';"
          fi
          
          # Clean and validate the API key
          api_key=$(echo "$api_key" | tr -d ' \t\r\n')
          
          # Validate API key format (UUID)
          if echo "$api_key" | grep -q '^[a-f0-9]\{8\}-[a-f0-9]\{4\}-[a-f0-9]\{4\}-[a-f0-9]\{4\}-[a-f0-9]\{12\}$'; then
            echo "✅ Valid API key: $api_key"
            echo "CKAN_API_KEY=$api_key" >> $GITHUB_ENV
          else
            echo "❌ Invalid API key format"
            exit 1
          fi

      - name: Create organization
        run: |
          echo "Creating demo organization..."
          
          org_response=$(curl -X POST $CKAN_URL/api/3/action/organization_create \
            -H "Authorization: $CKAN_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "demo-organization",
              "title": "Demo Data Publishing Organization",
              "description": "Demo organization for testing CKAN functionality"
            }')
          
          if echo "$org_response" | grep -q '"success": true'; then
            echo "✅ Organization created successfully!"
          elif echo "$org_response" | grep -q "already exists"; then
            echo "⚠️ Organization already exists, continuing..."
          else
            echo "❌ Failed to create organization"
            echo "$org_response"
            exit 1
          fi

      - name: Create dataset
        run: |
          echo "Creating demo dataset..."
          
          dataset_response=$(curl -X POST $CKAN_URL/api/3/action/package_create \
            -H "Authorization: $CKAN_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "my-first-dataset",
              "title": "My First Dataset",
              "notes": "Demo dataset for testing",
              "owner_org": "demo-organization",
              "license_id": "cc-by",
              "tags": [
                {"name": "demo"},
                {"name": "test"}
              ]
            }')
          
          if echo "$dataset_response" | grep -q '"success": true'; then
            echo "✅ Dataset created successfully!"
          elif echo "$dataset_response" | grep -q "already exists"; then
            echo "⚠️ Dataset already exists, continuing..."
          else
            echo "❌ Failed to create dataset"
            echo "$dataset_response"
            exit 1
          fi

      - name: Add resource to dataset
        run: |
          echo "Adding resource to dataset..."
          
          resource_response=$(curl -X POST $CKAN_URL/api/3/action/resource_create \
            -H "Authorization: $CKAN_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "package_id": "my-first-dataset",
              "url": "https://raw.githubusercontent.com/frictionlessdata/test-data/master/files/csv/100kb.csv",
              "name": "Sample CSV Data",
              "description": "Test CSV resource",
              "format": "CSV"
            }')
          
          if echo "$resource_response" | grep -q '"success": true'; then
            echo "✅ Resource created successfully!"
          else
            echo "❌ Failed to create resource"
            echo "$resource_response"
            exit 1
          fi

      - name: Verify setup
        run: |
          echo "🎉 CKAN Setup Complete!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 CREATED CONTENT:"
          echo "   🏢 Organization: demo-organization"
          echo "      └── 📊 Dataset: my-first-dataset"
          echo "          └── 📁 Resource: Sample CSV Data"
          echo ""
          echo "🔗 Access URLs:"
          echo "   • API: $CKAN_URL/api/3/action/status_show"
          echo "   • Dataset: $CKAN_URL/dataset/my-first-dataset"
          echo "   • Organization: $CKAN_URL/organization/demo-organization"
          echo ""
          echo "🔑 API Key: $CKAN_API_KEY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
      # Add your datapusher-plus specific steps here
      - name: Setup datapusher-plus (placeholder)
        run: |
          echo "🚀 Add your datapusher-plus specific tests here"
          echo "CKAN is running at $CKAN_URL with sample data ready"
          
      - name: Cleanup
        if: always()
        run: |
          echo "Stopping CKAN processes..."
          pkill -f "ckan.*run" || true
          echo "Cleanup completed"
