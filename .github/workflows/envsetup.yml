name: Setup Environment

on: 
 # push:
 # pull_request:
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  setup:
    runs-on: ubuntu-latest
    container:
      # The CKAN version tag of the Solr and Postgres containers should match
      # the one of the container the tests run on.
      # You can switch this base image with a custom image tailored to your project
      image: ckan/ckan-dev:2.11
      options: --user root
    services:
      solr:
        image: ckan/ckan-solr:2.11-solr9
      postgres:
        image: ckan/ckan-postgres-dev:2.11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:3
    env:
      CKAN_SQLALCHEMY_URL: postgresql://ckan_default:pass@postgres/ckan_test
      CKAN_DATASTORE_WRITE_URL: postgresql://datastore_write:pass@postgres/datastore_test
      CKAN_DATASTORE_READ_URL: postgresql://datastore_read:pass@postgres/datastore_test
      CKAN_SOLR_URL: http://solr:8983/solr/ckan
      CKAN_REDIS_URL: redis://redis:6379/1
    steps:
      - name: Fix permissions
        run: |
          # Ensure the workspace directory has proper permissions
          mkdir -p /__w/_temp
          chmod -R 777 /__w/_temp
          chmod -R 777 /__w/
      
      - uses: actions/checkout@v4
      
      - name: Install requirements
        # Install any extra requirements your extension has here (dev requirements, other extensions etc)
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .
          
      - name: Setup extension
        # Extra initialization steps
        run: |
          # Initialize CKAN database
          ckan -c /srv/app/src/ckan/test-core.ini db init
          echo "Environment setup completed successfully"

      - name: Start CKAN server
        run: |
          # Get the container's IP address
          CONTAINER_IP=$(hostname -i | awk '{print $1}')
          echo "Container IP: $CONTAINER_IP"
          
          # Start CKAN server in background
          ckan -c /srv/app/src/ckan/test-core.ini run --host 0.0.0.0 --port 5000 &
          CKAN_PID=$!
          echo "CKAN PID: $CKAN_PID"
          
          # Wait for server to start up
          echo "Waiting for CKAN server to start..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            # Try multiple connection methods
            if curl -f http://localhost:5000/api/3/action/status_show > /dev/null 2>&1 || \
               curl -f http://127.0.0.1:5000/api/3/action/status_show > /dev/null 2>&1 || \
               curl -f http://$CONTAINER_IP:5000/api/3/action/status_show > /dev/null 2>&1 || \
               curl -f http://0.0.0.0:5000/api/3/action/status_show > /dev/null 2>&1; then
              echo "CKAN server is running!"
              break
            fi
            
            # Check if process is still running
            if ! kill -0 $CKAN_PID 2>/dev/null; then
              echo "CKAN process died unexpectedly"
              # Show last logs
              tail -n 50 /var/log/ckan/*.log 2>/dev/null || true
              exit 1
            fi
            
            echo "Still waiting... ($timeout seconds remaining)"
            sleep 3
            timeout=$((timeout-3))
          done
          
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for CKAN server to start"
            # Try to diagnose the issue
            echo "Checking process status..."
            ps aux | grep ckan || true
            echo "Checking network listeners..."
            netstat -tlnp || ss -tlnp || true
            echo "Trying direct curl to different endpoints..."
            curl -v http://localhost:5000 2>&1 || true
            exit 1
          fi
          
          # Export the working URL for next steps
          if curl -f http://localhost:5000/api/3/action/status_show > /dev/null 2>&1; then
            echo "CKAN_URL=http://localhost:5000" >> $GITHUB_ENV
          elif curl -f http://127.0.0.1:5000/api/3/action/status_show > /dev/null 2>&1; then
            echo "CKAN_URL=http://127.0.0.1:5000" >> $GITHUB_ENV
          elif curl -f http://$CONTAINER_IP:5000/api/3/action/status_show > /dev/null 2>&1; then
            echo "CKAN_URL=http://$CONTAINER_IP:5000" >> $GITHUB_ENV
          else
            echo "CKAN_URL=http://0.0.0.0:5000" >> $GITHUB_ENV
          fi

      - name: Test CKAN API Status
        run: |
          echo "Testing CKAN API status endpoint..."
          echo "Using CKAN URL: ${CKAN_URL:-http://localhost:5000}"
          
          # Make API call to status_show endpoint
          response=$(curl -s -w "\nHTTP_CODE:%{http_code}" ${CKAN_URL:-http://localhost:5000}/api/3/action/status_show)
          
          # Extract HTTP status code
          http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
          json_response=$(echo "$response" | grep -v "HTTP_CODE:")
          
          echo "HTTP Status Code: $http_code"
          echo "API Response:"
          echo "$json_response" | python -m json.tool || echo "$json_response"
          
          # Check if the request was successful
          if [ "$http_code" = "200" ]; then
            echo "✅ CKAN API status check successful!"
            echo "Full API Response saved for inspection"
            
            # Simple parsing using grep and sed
            echo "Parsing status information..."
            echo "$json_response" | grep -o '"ckan_version":"[^"]*"' | sed 's/"ckan_version":"\(.*\)"/CKAN Version: \1/' || echo "CKAN Version: Unknown"
            echo "$json_response" | grep -o '"site_title":"[^"]*"' | sed 's/"site_title":"\(.*\)"/Site Title: \1/' || echo "Site Title: Unknown"
            echo "$json_response" | grep -o '"site_url":"[^"]*"' | sed 's/"site_url":"\(.*\)"/Site URL: \1/' || echo "Site URL: Unknown"
            
            # Check if success is true
            if echo "$json_response" | grep -q '"success":true'; then
              echo "API call was successful!"
            else
              echo "API call reported failure"
            fi
          else
            echo "❌ CKAN API status check failed with HTTP code: $http_code"
            echo "Response: $json_response"
            
            # Additional debugging
            echo "Attempting direct connection test..."
            curl -v ${CKAN_URL:-http://localhost:5000}/ 2>&1 || true
            exit 1
          fi

      - name: Run additional CKAN tests (optional)
        run: |
          echo "Running additional API tests..."
          
          # Test package list endpoint
          echo "Testing package_list endpoint..."
          curl -s ${CKAN_URL:-http://localhost:5000}/api/3/action/package_list | python -m json.tool | head -20
          
          # Test organization list endpoint
          echo "Testing organization_list endpoint..."
          curl -s ${CKAN_URL:-http://localhost:5000}/api/3/action/organization_list | python -m json.tool | head -20

      - name: Cleanup
        if: always()
        run: |
          echo "Stopping any running CKAN processes..."
          pkill -f "ckan.*run" || true
          echo "Cleanup completed"
